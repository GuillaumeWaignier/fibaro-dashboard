---

- name: Add {{ group }} group
  group:
    name: "{{ group }}"
    state: present
- name: Create {{ user }} user
  user:
    name: "{{ user }}"
    group: "{{ group }}"
    createhome: no
    shell: /bin/bash
    state: present
- name: Create {{ base_directory }} directory
  file:
    path: "{{ base_directory }}"
    state: directory
    mode: 0755
    owner: "root"
    group: "root"

- name: Create fibaro directory
  file:
    path: "{{ base_directory }}/fibaro"
    state: directory
    mode: 0755
    owner: "{{user}}"
    group: "{{group}}"

- name: Install JQ
  apt:
    name: jq
    state: present


- name: Install Flask python package
  ansible.builtin.pip:
    name: Flask

- name: Install elastic-apm python package
  ansible.builtin.pip:
    name: elastic-apm

- name: Install elasticsearch python package
  ansible.builtin.pip:
    name: elasticsearch

- name: Install gunicorn python web server package
  ansible.builtin.pip:
    name: gunicorn

- name: Install py2neo python package for neo4j
  ansible.builtin.pip:
    name: py2neo

- name: Configure for fibaro script
  template:
    src: templates/{{ item }}.j2
    dest: "{{ base_directory }}/fibaro/{{ item }}"
    owner: "{{user}}"
    group: "{{group}}"
    mode: 0700
  with_items:
    - fibaro_collect.sh
    - fibaro_zwave_graph.sh
    - fibaro_collect_events.sh
    - config.ini
    - fibaro_collect-healthcheck.sh
  notify: restart_collector

- name: Install fibaro python collector
  copy:
    src: files/{{ item }}
    dest: "{{ base_directory }}/fibaro/{{ item }}"
    owner: "{{user}}"
    group: "{{group}}"
    mode: 0700
  with_items:
    - fibaro_collect.py
  notify: restart_collector

- name: Service systemD for fibaro collector
  template:
    src: templates/fibaro_collect.service.j2
    dest: /etc/systemd/system/fibaro_collect.service
    owner: root
    group: root
    mode: 0644
  notify: restart_collector
- name: Enable service fibaro collector
  systemd:
    enabled: yes
    daemon_reload: yes
    name: fibaro_collect.service

- name: Add crontab entry for collector iot
  cron:
    name: "fibaro_collect_iot"
    minute: "{{ cronMinute }}"
    state: "present"
    user: "{{ user }}"
    job: "curl http://127.0.0.1:5000/index/iot"

- name: Add crontab entry for collector resource
  cron:
    name: "fibaro_collect_resource"
    minute: "{{ cronMinute }}"
    state: "present"
    user: "{{ user }}"
    job: "curl http://127.0.0.1:5000/index/resource"


- name: Add crontab entry for collector event
  cron:
    name: "fibaro_collect_events"
    minute: "{{ cronMinuteEvent }}"
    state: "present"
    user: "{{ user }}"
    job: "curl http://127.0.0.1:5000/index/event"

- name: Add crontab for caching scenes
  cron:
    name: "fibaro_cache_scene"
    minute: "2"
    hour: "0"
    state: "present"
    user: "{{ user }}"
    job: "curl http://127.0.0.1:5000/cache/scene"

- name: Add crontab for caching devices
  cron:
    name: "fibaro_cache_device"
    minute: "1"
    hour: "0"
    state: "present"
    user: "{{ user }}"
    job: "curl http://127.0.0.1:5000/cache/device"


- name: Add crontab for computing graph
  cron:
    name: "fibaro_collect_neo4j"
    minute: "4"
    hour: "0"
    state: "present"
    user: "{{ user }}"
    job: "curl http://127.0.0.1:5000/index/neo4j"
...
