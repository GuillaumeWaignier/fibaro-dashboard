# {{ ansible_managed }}
#!/bin/sh


LOGIN="{{ fibaro_login }}"
PASS="{{ fibaro_password }}"
URL="{{ fibaro_url }}"
ELASTICSEARCH_URL="{{ elasticsearch_url }}"
CLIMATE_INDEX="{{ elasticsearch_index }}"
POWER_INDEX="{{ elasticsearch_index_power }}"
RESOURCES_INDEX="{{ elasticsearch_index_resources }}"
THERMOSTAT_INDEX="{{ elasticsearch_index_thermostat }}"

now=`date -u +%FT%T.%3NZ`
indexName=`date -u +%Y-%m`


####################
# get all rooms    #
####################
getAllRooms() {
  rooms=`curl -k -H "Accept: application/json" -s -u ${LOGIN}:${PASS} ${URL}/api/rooms`
}

collectClimate() {
  # Temperature
  if [ "${type}" = "com.fibaro.temperatureSensor" ]
  then
    room=`echo "${rooms}" | jq "map(select(.id == ${roomID}))[].name"`
    body=`echo "{\"@timestamp\":\"${now}\",\"id\":${id},\"name\":${name},\"value\":${value},\"roomID\":${roomID},\"room\":${room},\"type\":\"temperature\"}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${CLIMATE_INDEX}-alias/_doc -d ${body} >> /dev/null


  # Humidity
  elif [ "${type}" = "com.fibaro.humiditySensor" ]
  then
    room=`echo "${rooms}" | jq "map(select(.id == ${roomID}))[].name"`
    body=`echo "{\"@timestamp\":\"${now}\",\"id\":${id},\"name\":${name},\"value\":${value},\"roomID\":${roomID},\"room\":${room},\"type\":\"humidity\"}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${CLIMATE_INDEX}-alias/_doc -d ${body} >> /dev/null

  # Light
  elif [ "${type}" = "com.fibaro.lightSensor" ]
  then
    room=`echo "${rooms}" | jq "map(select(.id == ${roomID}))[].name"`
    body=`echo "{\"@timestamp\":\"${now}\",\"id\":${id},\"name\":${name},\"value\":${value},\"roomID\":${roomID},\"room\":${room},\"type\":\"light\"}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${CLIMATE_INDEX}-alias/_doc -d ${body} >> /dev/null

  # Wind
  elif [ "${type}" = "com.fibaro.windSensor" ]
  then
    room=`echo "${rooms}" | jq "map(select(.id == ${roomID}))[].name"`
    body=`echo "{\"@timestamp\":\"${now}\",\"id\":${id},\"name\":${name},\"value\":${value},\"roomID\":${roomID},\"room\":${room},\"type\":\"wind\"}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${CLIMATE_INDEX}-alias/_doc -d ${body} >> /dev/null


  # uv
  elif [ "${name}" = "\"uv\"" ]
  then
    room=`echo "${rooms}" | jq "map(select(.id == ${roomID}))[].name"`
    body=`echo "{\"@timestamp\":\"${now}\",\"id\":${id},\"name\":${name},\"value\":${value},\"roomID\":${roomID},\"room\":${room},\"type\":\"uv\"}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${CLIMATE_INDEX}-alias/_doc -d ${body} >> /dev/null
  fi
}

collectPower() {
  power=`echo "${device}" | jq .properties.power`
  energy=`echo "${device}" | jq .properties.energy`

  if [ ! "${power}" = "null" ]
  then
    room=`echo "${rooms}" | jq "map(select(.id == ${roomID}))[].name"`
    body=`echo "{\"@timestamp\":\"${now}\",\"id\":${id},\"name\":${name},\"power\":${power},\"energy\":${energy},\"roomID\":${roomID},\"room\":${room}}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${POWER_INDEX}-alias/_doc -d ${body} >> /dev/null

  # Power
  elif [ "${type}" = "com.fibaro.powerMeter" ]
  then
    room=`echo "${rooms}" | jq "map(select(.id == ${roomID}))[].name"`
    body=`echo "{\"@timestamp\":\"${now}\",\"id\":${id},\"name\":${name},\"power\":${value},\"roomID\":${roomID},\"room\":${room}}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${POWER_INDEX}-alias/_doc -d ${body} >> /dev/null

  # Energy
  elif [ "${type}" = "com.fibaro.energyMeter" ]
  then
    room=`echo "${rooms}" | jq "map(select(.id == ${roomID}))[].name"`
    body=`echo "{\"@timestamp\":\"${now}\",\"id\":${id},\"name\":${name},\"energy\":${value},\"roomID\":${roomID},\"room\":${room}}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${POWER_INDEX}-alias/_doc -d ${body} >> /dev/null
  fi
}

collectThermostat() {
  if [ "${baseType}" = "com.fibaro.hvacSystem" ]
  then

    heatingThermostatSetpoint=`echo "${device}" | jq .properties.heatingThermostatSetpoint`
    log=`echo "${device}" | jq .properties.log`
    thermostatMode=`echo "${device}" | jq .properties.thermostatMode`

    room=`echo "${rooms}" | jq "map(select(.id == ${roomID}))[].name"`
    body=`echo "{\"@timestamp\":\"${now}\",\"id\":${id},\"name\":${name},\"status\":${log},\"mode\":${thermostatMode},\"temperature\":${heatingThermostatSetpoint},\"roomID\":${roomID},\"room\":${room}}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${THERMOSTAT_INDEX}-alias/_doc -d ${body} >> /dev/null

  fi
}

#############################
# iterate over all devices  #
#############################
iterateOverAllDevice() {
  devices=`curl -k -s -u ${LOGIN}:${PASS} ${URL}/api/devices`
  deviceNumber=`echo "${devices}" | jq length`

  i=0
  while [ "$i" -lt "${deviceNumber}" ]
  do
    device=`echo "${devices}" | jq .[$i]`

    id=`echo "${device}" | jq .id`
    type=`echo "${device}" | jq -r .type`
    baseType=`echo "${device}" | jq -r .baseType`
    name=`echo "${device}" | jq  .name`
    value=`echo "${device}" | jq .properties.value`
    roomID=`echo "${device}" | jq .roomID`
    visible=`echo "${device}" | jq .visible`

    # workaround: space produce crash during ES indexation (pb of charset ?)
    name=`echo "${name}" | sed -e "s/ /_/g"`

    if [ "${visible}" = true ]
    then
        collectClimate
        collectPower
        collectThermostat
    fi

    i=$(( i + 1 ))
  done
}


#############################
# Collect HC3 resources     #
#############################
collectHC3Resources() {
  resources=`curl -k -s -u ${LOGIN}:${PASS} ${URL}/api/diagnostics`

  memoryFree=`echo ${resources} | jq .memory.free`
  memoryCache=`echo ${resources} | jq .memory.cache`
  memoryBuffer=`echo ${resources} | jq .memory.buffers`
  memoryUsed=`echo ${resources} | jq .memory.used`
  storage=`echo ${resources} | jq .storage.internal[0].used`

  body=`echo "{\"@timestamp\":\"${now}\",\"memory\":{\"free\":${memoryFree},\"cache\":${memoryCache},\"buffer\":${memoryBuffer},\"used\":${memoryUsed}},\"storage\":${storage}}"`
  curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${RESOURCES_INDEX}-alias/_doc -d ${body} >> /dev/null

  cpus=`echo ${resources} | jq .cpuLoad`
  cpuNumber=`echo "${cpus}" | jq length`
  i=0
  while [ "$i" -lt "${cpuNumber}" ]
  do
    cpu=`echo "${cpus}" | jq .[$i]`

    name=`echo ${cpu} | jq .name`
    user=`echo ${cpu} | jq -r .user`
    nice=`echo ${cpu} | jq -r .nice`
    system=`echo ${cpu} | jq -r .system`
    idle=`echo ${cpu} | jq -r .idle`

    body=`echo "{\"@timestamp\":\"${now}\",\"cpuName\":${name},\"user\":${user},\"nice\":${nice},\"system\":${system},\"idle\":${idle}}"`
    curl -k -u {{ elasticsearch_login }}:{{ elasticsearch_password }} -s -H "Accept: application/json" -H "Content-Type: application/json" -XPOST ${ELASTICSEARCH_URL}/${RESOURCES_INDEX}-alias/_doc -d ${body} >> /dev/null

    i=$(( i + 1 ))
  done
}


######
getAllRooms
iterateOverAllDevice
collectHC3Resources