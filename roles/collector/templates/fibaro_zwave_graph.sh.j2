# {{ ansible_managed }}
#!/bin/sh


echo "Need Admin fibaro account"
read -p "Enter Fibaro Login : " LOGIN
read -s -p "Enter Fibaro Password  : " PASS

URL="{{ fibaro_url }}"
NEO4J_URL="{{ neo4j_url }}"
NEO4J_USER="{{ neo4j_user }}"
NEO4J_PASSWORD="{{ neo4j_password }}"
NEO4J_DB="{{ neo4j_db }}"


function displayNeo4jResult {
  SUCCESS=`echo "$1" | grep "\"errors\":\[\]"`
  if [ -z "${SUCCESS}" ]
  then
    echo "[neo4j] Error is : $1 / json is $2"
  fi
}

function clear_neo4j {
  echo "[neo4J] Clear neo4j"
  JSON="{\"statements\":[{\"statement\":\"MATCH (n) OPTIONAL MATCH (n)-[r]-() DELETE n,r\"}]}"
  RES=`curl -s -XPOST -u "${NEO4J_USER}:${NEO4J_PASSWORD}" -H "Content-Type:application/json;charset=UTF-8" ${NEO4J_URL}/db/${NEO4J_DB:-neo4j}/tx/commit -d "${JSON}"`
  displayNeo4jResult "${RES}" "${JSON}"
}


function create_box {
  echo "[neo4J] Clear HC3 Home center"
  JSON="{\"statements\":[{\"statement\":\"CREATE (:box { Name:\\\"Home Center 3\\\",zwaveCompany:\\\"Fibargroup\\\",Id:1})\"}]}"
  RES=`curl -XPOST -s -u "${NEO4J_USER}:${NEO4J_PASSWORD}" -H "Content-Type:application/json;charset=UTF-8" ${NEO4J_URL}/db/${NEO4J_DB:-neo4j}/tx/commit -d "${JSON}"`
  displayNeo4jResult "${RES}" "${JSON}"
}

function create_nodes {

  i=0
  while [ "$i" -lt "${deviceNumber}" ]
  do
    device=`echo "${devices}" | jq .[$i]`

    echo "[neo4J] Create node ${i}/${deviceNumber}"

    type=`echo "${device}" | jq -r .type`

    if [ "${type}" = "com.fibaro.zwaveDevice" ]
    then
       id=`echo "${device}" | jq .id`
       name=`echo "${device}" | jq -r .name`
       roomID=`echo "${device}" | jq .roomID`
       zwaveCompany=`echo "${device}" | jq -r .properties.zwaveCompany`
       room=`echo "${rooms}" | jq -r "map(select(.id == ${roomID}))[].name"`
       battery=`echo "${device}" | jq -r .properties.batteryLevel`
       version=`echo "${device}" | jq -r .properties.zwaveVersion`
       info=`echo "${device}" | jq -r .properties.zwaveInfo`
       type=`echo "${info}" | cut -d, -f1`
       zwaveVersionMajor=`echo "${info}" | cut -d, -f2`
       zwaveVersionMinor=`echo "${info}" | cut -d, -f3`
       zwaveVersion=`echo "${zwaveVersionMajor}.${zwaveVersionMinor}"`
       wakeupTime=`echo "${device}" | jq -r .properties.wakeUpTime`
       securityLevel=`echo "${device}" | jq -r .properties.securityLevel`

       JSON="{\"statements\":[{\"statement\":\"CREATE (:${room} { Name:\\\"${name}\\\",securityLevel:\\\"${securityLevel}\\\",wakeupTime:${wakeupTime},zwaveVersion:toFloat(${zwaveVersion}),type:${type},version:toFloat(${version}),battery:${battery},zwaveCompany:\\\"${zwaveCompany}\\\",Id:$id})\"}]}"
       RES=`curl -XPOST -s -u "${NEO4J_USER}:${NEO4J_PASSWORD}" -H "Content-Type:application/json;charset=UTF-8" ${NEO4J_URL}/db/${NEO4J_DB:-neo4j}/tx/commit -d "${JSON}"`
       displayNeo4jResult "${RES}" "${JSON}"
    fi

    i=$(( i + 1 ))
  done
}


function create_links {

  i=0
  while [ "$i" -lt "${deviceNumber}" ]
  do
    device=`echo "${devices}" | jq .[$i]`

    echo "[neo4J] Create link for device ${i}/${deviceNumber}"

    id=`echo "${device}" | jq .id`
    type=`echo "${device}" | jq -r .type`

    if [ "${type}" = "com.fibaro.zwaveDevice" ]
    then
       lastWorkingRoute=`echo "${device}" | jq .properties.lastWorkingRoute`
       numberHop=`echo ${lastWorkingRoute} | jq length`

       start="$id"
       j=$(( numberHop - 1 ))
       while [ "$j" -ge 0 ]
       do
         echo "[neo4J] Create link hop ${j}/${numberHop}"

         end=`echo "${lastWorkingRoute}" | jq .[$j]`

         JSON="{\"statements\":[{\"statement\":\"MATCH (a),(b) WHERE a.Id = ${start} AND b.Id = ${end} CREATE (a)-[r:call{deviceId:$id}]->(b) RETURN type(r)\"}]}"
         RES=`curl -XPOST -s -u "${NEO4J_USER}:${NEO4J_PASSWORD}" -H "Content-Type:application/json;charset=UTF-8" ${NEO4J_URL}/db/${NEO4J_DB:-neo4j}/tx/commit -d "${JSON}"`
         displayNeo4jResult "${RES}" "${JSON}"
         start="$end"
         j=$(( j - 1 ))
       done
    fi

    i=$(( i + 1 ))
  done
}



clear_neo4j
rooms=`curl -H "Accept: application/json" -s -u ${LOGIN}:${PASS} ${URL}/api/rooms`
devices=`curl -s -u ${LOGIN}:${PASS} ${URL}/api/devices`
deviceNumber=`echo "${devices}" | jq length`
create_box
create_nodes
create_links